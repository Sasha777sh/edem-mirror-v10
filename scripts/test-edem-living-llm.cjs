#!/usr/bin/env node

// Change to the project root directory
process.chdir(__dirname + '/..');

const { detectEmotion } = require('./src/lib/edem-living-llm/emotion-engine');
const { selectRitual } = require('./src/lib/edem-living-llm/ritual-engine');
const { selectScene } = require('./src/lib/edem-living-llm/scene-engine');
const { generateVoiceResponse } = require('./src/lib/edem-living-llm/voice-generator');

async function runTests() {
  console.log('Testing EDEM Living LLM components...\n');

  // Test emotion detection
  console.log('1. Testing emotion detection...');
  try {
    const emotion1 = await detectEmotion('–Ø —á—É–≤—Å—Ç–≤—É—é —Ç—Ä–µ–≤–æ–≥—É');
    console.log('   –¢—Ä–µ–≤–æ–≥–∞ detection:', emotion1 === '—Ç—Ä–µ–≤–æ–≥–∞' ? '‚úÖ PASS' : '‚ùå FAIL');

    const emotion2 = await detectEmotion('–ú–µ–Ω—è –ø–µ—Ä–µ–ø–æ–ª–Ω—è–µ—Ç —Å—Ç—ã–¥');
    console.log('   –°—Ç—ã–¥ detection:', emotion2 === '—Å—Ç—ã–¥' ? '‚úÖ PASS' : '‚ùå FAIL');

    const emotion3 = await detectEmotion('–Ø —á—É–≤—Å—Ç–≤—É—é —á—Ç–æ-—Ç–æ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ');
    console.log('   Default emotion:', emotion3 === '—Ç—Ä–µ–≤–æ–≥–∞' ? '‚úÖ PASS' : '‚ùå FAIL');
  } catch (error) {
    console.log('   Emotion detection test failed:', error.message);
  }

  // Test scene selection
  console.log('\n2. Testing scene selection...');
  try {
    const scene = await selectScene('—Ç—Ä–µ–≤–æ–≥–∞', new Date('2023-01-01T10:00:00Z'));
    console.log('   Scene selection:', scene ? '‚úÖ PASS' : '‚ùå FAIL');
    if (scene) console.log('   Selected scene:', scene);
  } catch (error) {
    console.log('   Scene selection test failed:', error.message);
  }

  // Test ritual selection
  console.log('\n3. Testing ritual selection...');
  try {
    const ritual = await selectRitual('—Ç—Ä–µ–≤–æ–≥–∞', '–æ–∫–Ω–æ –≤ –Ω–∞—á–∞–ª–µ –¥–Ω—è', 'test-user-id');
    console.log('   Ritual selection:', ritual ? '‚úÖ PASS' : '‚ùå FAIL');
    if (ritual) console.log('   Selected ritual:', ritual);
  } catch (error) {
    console.log('   Ritual selection test failed:', error.message);
  }

  // Test voice generation
  console.log('\n4. Testing voice generation...');
  try {
    const params = {
      userInput: '–Ø —á—É–≤—Å—Ç–≤—É—é —Ç—Ä–µ–≤–æ–≥—É',
      emotion: '—Ç—Ä–µ–≤–æ–≥–∞',
      scene: '–æ–∫–Ω–æ –≤ –Ω–∞—á–∞–ª–µ –¥–Ω—è',
      ritual: '–ü–æ–ª–æ–∂–∏ —Ä—É–∫—É –Ω–∞ –∂–∏–≤–æ—Ç –∏ –¥—ã—à–∏ 3 —Ä–∞–∑–∞',
      stage: 'shadow',
      archetype: '–†–∞–Ω–µ–Ω—ã–π –≤–æ–∏–Ω'
    };

    const response = await generateVoiceResponse(params);
    console.log('   Voice generation:', response ? '‚úÖ PASS' : '‚ùå FAIL');
    if (response) {
      console.log('   Generated response:');
      console.log('   ---');
      console.log('   ' + response.split('\n').join('\n   '));
      console.log('   ---');
    }
  } catch (error) {
    console.log('   Voice generation test failed:', error.message);
  }

  console.log('\nüéâ All core components tested!');
  console.log('Note: Database-dependent components (ritual memory, user archetypes) require a working database connection to test fully.');
}

runTests().catch(console.error);