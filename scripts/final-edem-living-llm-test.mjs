#!/usr/bin/env node

// Final comprehensive test for EDEM Living LLM components
import { detectEmotion } from '../src/lib/edem-living-llm/dist/emotion-engine.js';
import { selectScene } from '../src/lib/edem-living-llm/dist/scene-engine.js';
import { selectRitual } from '../src/lib/edem-living-llm/dist/ritual-engine.js';
import { generateVoiceResponse } from '../src/lib/edem-living-llm/dist/voice-generator.js';

async function runComprehensiveTest() {
  console.log('üî¨ EDEM Living LLM - Final Comprehensive Test\n');

  try {
    // Test Case 1: Complete Flow Simulation
    console.log('üß™ Test Case 1: Complete Flow Simulation');
    
    const userInput = '–Ø —á—É–≤—Å—Ç–≤—É—é —Ç—Ä–µ–≤–æ–≥—É –∏ –Ω–µ –º–æ–≥—É —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è';
    console.log(`   User Input: "${userInput}"`);
    
    // Step 1: Emotion Detection
    const emotion = await detectEmotion(userInput);
    console.log(`   Detected Emotion: ${emotion}`);
    
    // Step 2: Scene Selection
    const scene = await selectScene(emotion, new Date());
    console.log(`   Selected Scene: ${scene}`);
    
    // Step 3: Ritual Selection
    const ritual = await selectRitual(emotion, scene, 'test-user-id');
    console.log(`   Selected Ritual: ${ritual}`);
    
    // Step 4: Voice Response Generation (Shadow Stage)
    const shadowResponse = await generateVoiceResponse({
      userInput,
      emotion,
      scene,
      ritual,
      stage: 'shadow',
      archetype: '–†–∞–Ω–µ–Ω—ã–π –≤–æ–∏–Ω'
    });
    console.log(`   Shadow Stage Response: ${shadowResponse.substring(0, 60)}...`);
    
    // Step 5: Voice Response Generation (Truth Stage)
    const truthResponse = await generateVoiceResponse({
      userInput,
      emotion,
      scene,
      ritual,
      stage: 'truth',
      archetype: '–†–∞–Ω–µ–Ω—ã–π –≤–æ–∏–Ω'
    });
    console.log(`   Truth Stage Response: ${truthResponse.substring(0, 60)}...`);
    
    // Step 6: Voice Response Generation (Integration Stage)
    const integrationResponse = await generateVoiceResponse({
      userInput,
      emotion,
      scene,
      ritual,
      stage: 'integration',
      archetype: '–†–∞–Ω–µ–Ω—ã–π –≤–æ–∏–Ω'
    });
    console.log(`   Integration Stage Response: ${integrationResponse.substring(0, 60)}...`);
    
    console.log('   Status: ‚úÖ COMPLETE FLOW TEST PASSED\n');
    
    // Test Case 2: Different Emotions
    console.log('üß™ Test Case 2: Different Emotions');
    
    const emotions = ['—Å—Ç—ã–¥', '–æ–±–∏–¥–∞', '–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ', '–ø—É—Å—Ç–æ—Ç–∞', '–ø–µ—á–∞–ª—å'];
    for (const emo of emotions) {
      const scene = await selectScene(emo, new Date());
      const ritual = await selectRitual(emo, scene, 'test-user-id');
      const response = await generateVoiceResponse({
        userInput: `–Ø —á—É–≤—Å—Ç–≤—É—é ${emo}`,
        emotion: emo,
        scene,
        ritual,
        stage: 'shadow'
      });
      console.log(`   ${emo}: ${response.substring(0, 40)}...`);
    }
    
    console.log('   Status: ‚úÖ EMOTION TEST PASSED\n');
    
    // Test Case 3: Different Archetypes
    console.log('üß™ Test Case 3: Different Archetypes');
    
    const archetypes = ['–†–∞–Ω–µ–Ω—ã–π –≤–æ–∏–Ω', '–ü–æ–∫–∏–Ω—É—Ç—ã–π —Ä–µ–±—ë–Ω–æ–∫', '–¢–æ—Ç, –∫—Ç–æ –≤—Å—ë —Ä–∞–∑—Ä—É—à–∏–ª', '–ì–µ—Ä–æ–π, –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–ª'];
    for (const arch of archetypes) {
      const response = await generateVoiceResponse({
        userInput: '–Ø —á—É–≤—Å—Ç–≤—É—é —Ç—Ä–µ–≤–æ–≥—É',
        emotion: '—Ç—Ä–µ–≤–æ–≥–∞',
        scene: '–æ–∫–Ω–æ –≤ –Ω–∞—á–∞–ª–µ –¥–Ω—è',
        ritual: '–ü–æ–ª–æ–∂–∏ —Ä—É–∫—É –Ω–∞ –∂–∏–≤–æ—Ç –∏ –¥—ã—à–∏ 3 —Ä–∞–∑–∞',
        stage: 'shadow',
        archetype: arch
      });
      console.log(`   ${arch}: ${response.substring(0, 40)}...`);
    }
    
    console.log('   Status: ‚úÖ ARCHETYPE TEST PASSED\n');
    
    // Test Case 4: Different Times of Day
    console.log('üß™ Test Case 4: Different Times of Day');
    
    const times = [
      new Date('2023-01-01T08:00:00Z'), // Morning
      new Date('2023-01-01T14:00:00Z'), // Afternoon
      new Date('2023-01-01T20:00:00Z'), // Evening
      new Date('2023-01-01T02:00:00Z')  // Night
    ];
    
    for (const time of times) {
      const scene = await selectScene('—Ç—Ä–µ–≤–æ–≥–∞', time);
      console.log(`   ${time.getHours()}:00 - ${scene}`);
    }
    
    console.log('   Status: ‚úÖ TIME OF DAY TEST PASSED\n');
    
    console.log('üéâ ALL TESTS PASSED! EDEM Living LLM is fully functional!');
    console.log('üöÄ The system is ready for database integration and production deployment.');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
    process.exit(1);
  }
}

runComprehensiveTest();