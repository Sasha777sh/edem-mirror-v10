/**
 * npx tsx test-rag-search.ts
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∏—Å–∫–∞ –ø–æ RAG —á–∞–Ω–∫–∞–º
 */

import 'dotenv/config';
import { createClient } from '@supabase/supabase-js';
import OpenAI from 'openai';

const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_SERVICE_ROLE!);
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY! });
const EMBED_MODEL = process.env.EMBED_MODEL || 'text-embedding-3-large';

export async function retrieve(query: string, k = 5, filters?: {
    stage?: string[], symptom?: string[], lang?: string
}) {
    // –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    const emb = await openai.embeddings.create({ model: EMBED_MODEL, input: query });
    const vec = emb.data[0].embedding;

    // –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    let sql = `
    select id, title, stage, symptom, archetype, lang, text,
           1 - (embedding <=> $1) as score
    from rag_chunks
    where embedding is not null
  `;
    const params: any[] = [vec];

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if (filters?.lang) {
        sql += ` and lang = $${params.length + 1}`;
        params.push(filters.lang);
    }
    if (filters?.stage?.length) {
        sql += ` and stage && $${params.length + 1}::text[]`;
        params.push(filters.stage);
    }
    if (filters?.symptom?.length) {
        sql += ` and symptom && $${params.length + 1}::text[]`;
        params.push(filters.symptom);
    }

    sql += ` order by embedding <=> $1 limit ${k}`;

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    const { data, error } = await supabase
        .from('rag_chunks')
        .select('id, title, stage, symptom, archetype, lang, text, embedding')
        .filter('embedding', 'not.is', null)
        .order('embedding', { foreignTable: 'embedding <=>', ascending: true })
        .limit(k);

    if (error) throw error;
    return data;
}

// –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
async function testSearch() {
    console.log('üîç Testing RAG search...');

    const query = '–ú–Ω–µ —Ç—è–∂–µ–ª–æ –∑–∞—Å—ã–ø–∞—Ç—å, –≥–æ–ª–æ–≤–∞ —à—É–º–∏—Ç, —Ç—Ä–µ–≤–æ–≥–∞';
    console.log(`\nQuery: ${query}`);

    try {
        const results = await retrieve(query, 5, { lang: 'ru', symptom: ['anxiety', 'sleep'] });
        console.log(`\nFound ${results.length} results:`);

        for (const result of results) {
            console.log(`\n--- ${result.title} ---`);
            console.log(`Stage: ${result.stage?.join(', ')}`);
            console.log(`Symptom: ${result.symptom?.join(', ')}`);
            console.log(`Archetype: ${result.archetype?.join(', ')}`);
            console.log(`Language: ${result.lang}`);
            console.log(`Text: ${JSON.stringify(result.text, null, 2)}`);
        }
    } catch (error) {
        console.error('Search failed:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testSearch().catch(console.error);