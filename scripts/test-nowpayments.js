// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è NOWPayments API –∫–ª—é—á–µ–π
// –ó–∞–ø—É—Å–∫: node scripts/test-nowpayments.js

require('dotenv').config();

const API_KEY = process.env.NOWPAYMENTS_API_KEY;
const API_URL = 'https://api.nowpayments.io/v1';

if (!API_KEY) {
    console.error('‚ùå NOWPAYMENTS_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    process.exit(1);
}

console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ NOWPayments API...');
console.log(`üì° API Key: ${API_KEY.substring(0, 10)}...${API_KEY.substring(API_KEY.length - 4)}`);

async function testNOWPayments() {
    try {
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
        console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API...');
        const statusResponse = await fetch(`${API_URL}/status`, {
            headers: {
                'x-api-key': API_KEY
            }
        });

        if (!statusResponse.ok) {
            throw new Error(`Status API error: ${statusResponse.status} ${statusResponse.statusText}`);
        }

        const statusData = await statusResponse.json();
        console.log('‚úÖ –°—Ç–∞—Ç—É—Å API:', statusData.message || 'OK');

        // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç
        console.log('\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∞–ª—é—Ç...');
        const currenciesResponse = await fetch(`${API_URL}/currencies`, {
            headers: {
                'x-api-key': API_KEY
            }
        });

        if (!currenciesResponse.ok) {
            throw new Error(`Currencies API error: ${currenciesResponse.status}`);
        }

        const currenciesData = await currenciesResponse.json();
        const supportedCryptos = ['btc', 'eth', 'usdt', 'usdc', 'ltc', 'xmr'];
        const availableCryptos = currenciesData.currencies.filter(c =>
            supportedCryptos.includes(c.toLowerCase())
        );

        console.log('‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ EDEM:');
        availableCryptos.forEach(crypto => {
            console.log(`   ü™ô ${crypto.toUpperCase()}`);
        });

        // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Å—É–º–º
        console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Å—É–º–º...');
        const minAmountResponse = await fetch(`${API_URL}/min-amount?currency_from=usd&currency_to=btc`, {
            headers: {
                'x-api-key': API_KEY
            }
        });

        if (minAmountResponse.ok) {
            const minAmountData = await minAmountResponse.json();
            console.log(`‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ BTC: ${minAmountData.min_amount} BTC`);
        }

        // 4. –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏)
        console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞...');
        const testPayment = {
            price_amount: 5.99,
            price_currency: 'USD',
            pay_currency: 'btc',
            order_id: `test_${Date.now()}`,
            order_description: 'EDEM PRO - —Ç–µ—Å—Ç –ø–ª–∞—Ç–µ–∂–∞',
            success_url: 'https://example.com/success',
            cancel_url: 'https://example.com/cancel'
        };

        console.log('üìã –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:');
        console.log(`   üí∞ –°—É–º–º–∞: $${testPayment.price_amount}`);
        console.log(`   ü™ô –í–∞–ª—é—Ç–∞: ${testPayment.pay_currency.toUpperCase()}`);
        console.log(`   üÜî Order ID: ${testPayment.order_id}`);

        // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–±—Ä–∞—Ç—å —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –¥–µ–ª–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        console.log('‚ö†Ô∏è  –†–µ–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂ –Ω–µ —Å–æ–∑–¥–∞–Ω (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)');

        console.log('\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! NOWPayments API –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');

        return true;

    } catch (error) {
        console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);

        if (error.message.includes('401')) {
            console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
            console.log('   - –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á');
            console.log('   - API –∫–ª—é—á –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
            console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ NOWPayments –¥–∞—à–±–æ—Ä–¥–µ');
        }

        return false;
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testNOWPayments().then(success => {
    if (success) {
        console.log('\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–∏—ë–º—É –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π!');
        console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
        console.log('   1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ IPN Secret –¥–ª—è webhook');
        console.log('   2. –£–∫–∞–∂–∏—Ç–µ Callback URL –≤ –¥–∞—à–±–æ—Ä–¥–µ');
        console.log('   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π');
    } else {
        console.log('\nüîß –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...');
    }

    process.exit(success ? 0 : 1);
});