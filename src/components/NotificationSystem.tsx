'use client';

import React, { useState, useEffect } from 'react';
import { Bell, X, Zap, Moon, Sun, Clock } from 'lucide-react';

interface SmartNotification {
    id: string;
    type: 'morning' | 'practice' | 'evening' | 'shadow_detected';
    message: string;
    shadowType?: string;
    time: string;
    priority: 'low' | 'medium' | 'high';
    actionable?: boolean;
}

interface NotificationSystemProps {
    currentShadow: string;
    practicesDone: boolean;
    onTriggerPractice: (shadowType: string) => void;
}

export default function NotificationSystem({
    currentShadow,
    practicesDone,
    onTriggerPractice
}: NotificationSystemProps) {
    const [notifications, setNotifications] = useState<SmartNotification[]>([]);
    const [isOpen, setIsOpen] = useState(false);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    useEffect(() => {
        const shadowMessages: Record<string, any> = {
            shame: {
                morning: "–°–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∫—Ç–∏–∫—É–µ–º –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å. –û–¥–Ω–æ —á–µ—Å—Ç–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ?",
                practice: "–°—Ç—ã–¥ —Å–∂–∏–º–∞–µ—Ç –≥—Ä—É–¥—å. 4-7-8 –¥—ã—Ö–∞–Ω–∏–µ ‚Äî –∏ –º—è–≥–∫–∏–π —à–∞–≥ –∫ –∂–µ–ª–∞–Ω–∏—é",
                evening: "–ß—Ç–æ —Å—Ç–∞–ª–æ —á–µ—Å—Ç–Ω–µ–µ —Å–µ–≥–æ–¥–Ω—è? –ó–∞–ø–∏—à–∏ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É",
                detected: "üîç –ó–∞–º–µ—á–µ–Ω –º–∞—Ä–∫–µ—Ä —Å—Ç—ã–¥–∞. –ì–æ—Ç–æ–≤ –∫ 5-–º–∏–Ω—É—Ç–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ?"
            },
            rejection: {
                morning: "–î–µ–Ω—å –¥–ª—è –≥—Ä–∞–Ω–∏—Ü. –ì–¥–µ —Å–µ–≥–æ–¥–Ω—è —Å–∫–∞–∂–µ—à—å —á–µ—Å—Ç–Ω–æ–µ '–Ω–µ—Ç'?",
                practice: "–û—Ç–≤–µ—Ä–∂–µ–Ω–∏–µ ‚Äî —ç—Ç–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –Ω–µ –æ—Ü–µ–Ω–∫–∞. –°–∫–∞–Ω —Ç–µ–ª–∞ 2 –º–∏–Ω",
                evening: "–ì–¥–µ –≤—ã–±—Ä–∞–ª —Å–µ–±—è –≤–º–µ—Å—Ç–æ —É–≥–æ–∂–¥–µ–Ω–∏—è?",
                detected: "üíî –¢—Ä–∏–≥–≥–µ—Ä –æ—Ç–≤–µ—Ä–∂–µ–Ω–∏—è. –ü–æ–º–Ω–∏—à—å: –æ—Ç–∫–∞–∑ –Ω–µ –ø—Ä–æ —Ç–µ–±—è"
            },
            control: {
                morning: "–°–µ–≥–æ–¥–Ω—è –æ—Ç–ø—É—Å–∫–∞–µ–º. –ß—Ç–æ –º–æ–∂–Ω–æ –¥–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–∏–º?",
                practice: "–•–≤–∞—Ç–∫–∞ —Å–æ–∑–¥–∞–µ—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ. –û—â—É—Ç–∏ –ª–∞–¥–æ–Ω–∏ ‚Üí –¥–µ–ª–µ–≥–∏—Ä—É–π –∑–∞–¥–∞—á—É",
                evening: "–ß—Ç–æ –≤—ã–¥–µ—Ä–∂–∞–ª–æ –±–µ–∑ —Ç–≤–æ–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è?",
                detected: "ü§è –†–µ–∂–∏–º –∫–æ–Ω—Ç—Ä–æ–ª—è –∞–∫—Ç–∏–≤–µ–Ω. –í—Ä–µ–º—è –¥–ª—è –¥–æ–≤–µ—Ä–∏—è?"
            },
            loss: {
                morning: "–î–µ–Ω—å –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è. –ß—Ç–æ –º–æ–∂–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –¥–ª—è –Ω–æ–≤–æ–≥–æ?",
                practice: "–û—Ç–ø—É—Å–∫–∞—è –º–∞–ª–æ–µ, –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—à—å –º–µ—Å—Ç–æ –±–æ–ª—å—à–µ–º—É",
                evening: "–ß—Ç–æ –ø—Ä–∏—à–ª–æ –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ?",
                detected: "üòî –°—Ç—Ä–∞—Ö –ø–æ—Ç–µ—Ä–∏. –ü–æ–º–Ω–∏—à—å –ø—Ä–æ –º–µ—Å—Ç–æ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ?"
            },
            guilt: {
                morning: "–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≤–æ—é —ç–Ω–µ—Ä–≥–∏—é. –ö–∞–∫—É—é —á—É–∂—É—é –Ω–æ—à—É —Å–µ–≥–æ–¥–Ω—è –æ—Ç–¥–∞—à—å?",
                practice: "–í–∏–Ω–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–ª—É",
                evening: "–ö–∞–∫—É—é —ç–Ω–µ—Ä–≥–∏—é –≤–µ—Ä–Ω—É–ª —Å–µ–±–µ?",
                detected: "üò∞ –í–∏–Ω–∞ –≤–∫–ª—é—á–∏–ª–∞—Å—å. –í—Ä–µ–º—è –≤–µ—Ä–Ω—É—Ç—å —Å–≤–æ—é —Å–∏–ª—É"
            }
        };

        const current = shadowMessages[currentShadow];
        if (!current) return;

        const now = new Date();
        const hour = now.getHours();

        const newNotifications: SmartNotification[] = [];

        // –£—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (8-10)
        if (hour >= 8 && hour <= 10) {
            newNotifications.push({
                id: 'morning',
                type: 'morning',
                message: current.morning,
                shadowType: currentShadow,
                time: '09:00',
                priority: 'medium'
            });
        }

        // –ü—Ä–∞–∫—Ç–∏–∫–∞ (–µ—Å–ª–∏ –Ω–µ —Å–¥–µ–ª–∞–Ω–∞ –∏ 14-16)
        if (!practicesDone && hour >= 14 && hour <= 16) {
            newNotifications.push({
                id: 'practice',
                type: 'practice',
                message: current.practice,
                shadowType: currentShadow,
                time: '15:00',
                priority: 'high',
                actionable: true
            });
        }

        // –í–µ—á–µ—Ä–Ω–µ–µ (20-22)
        if (hour >= 20 && hour <= 22) {
            newNotifications.push({
                id: 'evening',
                type: 'evening',
                message: current.evening,
                shadowType: currentShadow,
                time: '21:00',
                priority: 'medium'
            });
        }

        setNotifications(newNotifications);
    }, [currentShadow, practicesDone]);

    const getIcon = (type: string) => {
        switch (type) {
            case 'morning': return <Sun className="w-4 h-4" />;
            case 'practice': return <Zap className="w-4 h-4" />;
            case 'evening': return <Moon className="w-4 h-4" />;
            case 'shadow_detected': return <Bell className="w-4 h-4" />;
            default: return <Clock className="w-4 h-4" />;
        }
    };

    const getPriorityColor = (priority: string) => {
        switch (priority) {
            case 'high': return 'border-red-500 bg-red-50';
            case 'medium': return 'border-violet-500 bg-violet-50';
            case 'low': return 'border-gray-300 bg-gray-50';
            default: return 'border-gray-300 bg-white';
        }
    };

    return (
        <div className="relative">
            {/* –ö–Ω–æ–ø–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
            <button
                onClick={() => setIsOpen(!isOpen)}
                className={`relative p-2 rounded-lg border transition-colors ${notifications.length > 0
                        ? 'border-violet-500 bg-violet-50 text-violet-600'
                        : 'border-gray-300 bg-white text-gray-600'
                    }`}
            >
                <Bell className="w-5 h-5" />
                {notifications.length > 0 && (
                    <div className="absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center">
                        {notifications.length}
                    </div>
                )}
            </button>

            {/* –ü–∞–Ω–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
            {isOpen && (
                <div className="absolute right-0 top-full mt-2 w-80 bg-white border rounded-xl shadow-lg z-50">
                    <div className="p-3 border-b flex items-center justify-between">
                        <div className="font-semibold">–£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</div>
                        <button onClick={() => setIsOpen(false)}>
                            <X className="w-4 h-4" />
                        </button>
                    </div>

                    <div className="max-h-64 overflow-y-auto">
                        {notifications.length === 0 ? (
                            <div className="p-4 text-center text-gray-500 text-sm">
                                –ü–æ–∫–∞ –≤—Å–µ —Å–ø–æ–∫–æ–π–Ω–æ ‚ú®
                            </div>
                        ) : (
                            notifications.map(notif => (
                                <div
                                    key={notif.id}
                                    className={`p-3 border-b last:border-b-0 ${getPriorityColor(notif.priority)}`}
                                >
                                    <div className="flex items-start gap-3">
                                        <div className="mt-0.5">
                                            {getIcon(notif.type)}
                                        </div>
                                        <div className="flex-1">
                                            <div className="text-sm font-medium">{notif.message}</div>
                                            <div className="text-xs text-gray-500 mt-1">
                                                {notif.time} ‚Ä¢ {notif.shadowType}
                                            </div>
                                            {notif.actionable && (
                                                <button
                                                    onClick={() => {
                                                        onTriggerPractice(notif.shadowType!);
                                                        setIsOpen(false);
                                                    }}
                                                    className="mt-2 px-3 py-1 bg-violet-600 text-white text-xs rounded-lg hover:bg-violet-700"
                                                >
                                                    –ù–∞—á–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫—É
                                                </button>
                                            )}
                                        </div>
                                    </div>
                                </div>
                            ))
                        )}
                    </div>
                </div>
            )}
        </div>
    );
}