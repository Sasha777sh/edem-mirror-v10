'use client';

import React, { useState } from 'react';
import { TrendingUp, Target, Zap, Award } from 'lucide-react';

interface MicroInsight {
    id: string;
    text: string;
    shadowType: string;
    confidence: number;
    date: string;
    validated?: boolean;
}

interface ProgressMicroInsightsProps {
    insights: MicroInsight[];
    currentStreak: number;
    weeklyTarget: number;
    onValidateInsight: (id: string, isValid: boolean) => void;
}

export default function ProgressMicroInsights({
    insights,
    currentStreak,
    weeklyTarget,
    onValidateInsight
}: ProgressMicroInsightsProps) {
    const [selectedInsight, setSelectedInsight] = useState<string | null>(null);

    const streakProgress = Math.min((currentStreak / weeklyTarget) * 100, 100);
    const recentInsights = insights.slice(-3);

    const shadowColors: Record<string, string> = {
        shame: '#8b5cf6',
        rejection: '#ef4444',
        control: '#10b981',
        loss: '#f59e0b',
        guilt: '#3b82f6'
    };

    const getStreakEmoji = (streak: number) => {
        if (streak >= 7) return 'üî•';
        if (streak >= 5) return '‚ö°';
        if (streak >= 3) return '‚ú®';
        if (streak >= 1) return 'üå±';
        return 'üí§';
    };

    const generateMicroFeedback = (insight: MicroInsight) => {
        const feedbacks: Record<string, string[]> = {
            shame: [
                "–ó–∞–º–µ—Ç–∏–ª –∫–∞–∫ –∂–µ–ª–∞–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–∏—â–µ?",
                "–ú–µ–Ω—å—à–µ –æ–ø—Ä–∞–≤–¥–∞–Ω–∏–π –≤ —Ä–µ—á–∏ ‚Äî –ø—Ä–æ–≥—Ä–µ—Å—Å!",
                "–î—ã—Ö–∞–Ω–∏–µ —Ä–æ–≤–Ω–µ–µ = —Å—Ç—ã–¥ –æ—Ç—Å—Ç—É–ø–∞–µ—Ç"
            ],
            rejection: [
                "–ì—Ä–∞–Ω–∏—Ü—ã –∫—Ä–µ–ø–Ω—É—Ç ‚Äî –≤–∏–¥–∏—à—å —Ä–∞–∑–Ω–∏—Ü—É?",
                "–ß–µ—Å—Ç–Ω–æ–µ '–Ω–µ—Ç' = —Å–∞–º–æ—É–≤–∞–∂–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ—Ç",
                "–û—Ç–∫–∞–∑—ã –ø—Ä–æ—â–µ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å?"
            ],
            control: [
                "–û—Ç–ø—É—Å–∫–∞–µ—à—å ‚Äî –º–∏—Ä –Ω–µ —Ä—É—à–∏—Ç—Å—è",
                "–î–æ–≤–µ—Ä–∏–µ –¥–∞–µ—Ç—Å—è ‚Äî –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ —É—Ö–æ–¥–∏—Ç",
                "–õ–∞–¥–æ–Ω–∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω—ã = –∫–æ–Ω—Ç—Ä–æ–ª—å –æ—Ç–ø—É—â–µ–Ω"
            ],
            loss: [
                "–û—Å–≤–æ–±–æ–∂–¥–∞–µ—à—å –º–µ—Å—Ç–æ ‚Äî —á—Ç–æ –ø—Ä–∏—à–ª–æ?",
                "–û—Ç–ø—É—Å–∫–∞–Ω–∏–µ = –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ",
                "–õ–µ–≥—á–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è?"
            ],
            guilt: [
                "–≠–Ω–µ—Ä–≥–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è ‚Äî —á—É–≤—Å—Ç–≤—É–µ—à—å?",
                "–ß—É–∂–∏–µ –Ω–æ—à–∏ –æ—Ç–¥–∞–Ω—ã = —Å–∏–ª–∞ —Ç–≤–æ—è",
                "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –≤–º–µ—Å—Ç–æ –≤–∏–Ω—ã —Ä–∞–±–æ—Ç–∞–µ—Ç?"
            ]
        };

        const options = feedbacks[insight.shadowType] || ["–ö–∞–∫ –æ—â—É—â–µ–Ω–∏—è –æ—Ç –ø—Ä–∞–∫—Ç–∏–∫–∏?"];
        return options[Math.floor(Math.random() * options.length)];
    };

    return (
        <div className="grid md:grid-cols-2 gap-4">
            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç—Ä–∏–∫ */}
            <div className="border rounded-2xl p-4 shadow-sm">
                <div className="flex items-center justify-between mb-3">
                    <div>
                        <div className="text-sm text-gray-500">–°—Ç—Ä–∏–∫ –ø—Ä–∞–∫—Ç–∏–∫</div>
                        <div className="text-2xl font-bold flex items-center gap-2">
                            {getStreakEmoji(currentStreak)} {currentStreak} –¥–Ω–µ–π
                        </div>
                    </div>
                    <div className="text-right">
                        <div className="text-xs text-gray-500">–¶–µ–ª—å –Ω–µ–¥–µ–ª–∏</div>
                        <div className="text-sm font-semibold">{weeklyTarget} –¥–Ω–µ–π</div>
                    </div>
                </div>

                {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */}
                <div className="relative">
                    <div className="w-full h-2 bg-gray-200 rounded-full overflow-hidden">
                        <div
                            className="h-full bg-gradient-to-r from-violet-500 to-fuchsia-500 transition-all duration-500 ease-out"
                            style={{ width: `${streakProgress}%` }}
                        />
                    </div>
                    <div className="text-xs text-gray-600 mt-1">
                        {Math.round(streakProgress)}% –æ—Ç —Ü–µ–ª–∏
                    </div>
                </div>

                {/* –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                <div className="grid grid-cols-3 gap-3 mt-4">
                    <div className="text-center">
                        <TrendingUp className="w-4 h-4 text-green-500 mx-auto" />
                        <div className="text-xs text-gray-500 mt-1">–¢—Ä–µ–Ω–¥</div>
                        <div className="text-sm font-semibold">‚Üó –†–æ—Å—Ç</div>
                    </div>
                    <div className="text-center">
                        <Target className="w-4 h-4 text-violet-500 mx-auto" />
                        <div className="text-xs text-gray-500 mt-1">–§–æ–∫—É—Å</div>
                        <div className="text-sm font-semibold">–°—Ç—ã–¥</div>
                    </div>
                    <div className="text-center">
                        <Award className="w-4 h-4 text-yellow-500 mx-auto" />
                        <div className="text-xs text-gray-500 mt-1">–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ</div>
                        <div className="text-sm font-semibold">
                            {currentStreak >= 7 ? '–ú–∞—Å—Ç–µ—Ä' : currentStreak >= 3 ? '–°—Ç–∞–±–∏–ª—å–Ω–æ' : '–ù–∞—á–∞–ª–æ'}
                        </div>
                    </div>
                </div>
            </div>

            {/* –ú–∏–∫—Ä–æ-–∏–Ω—Å–∞–π—Ç—ã */}
            <div className="border rounded-2xl p-4 shadow-sm">
                <div className="flex items-center justify-between mb-3">
                    <div>
                        <div className="text-sm text-gray-500">AI –∑–∞–º–µ—Ç–∏–ª</div>
                        <div className="text-lg font-semibold">–ú–∏–∫—Ä–æ-–∏–Ω—Å–∞–π—Ç—ã</div>
                    </div>
                    <Zap className="w-5 h-5 text-violet-500" />
                </div>

                <div className="space-y-3">
                    {recentInsights.length === 0 ? (
                        <div className="text-center text-gray-500 py-8">
                            <div className="text-xs">–ü–æ–∫–∞ –∏–Ω—Å–∞–π—Ç–æ–≤ –Ω–µ—Ç</div>
                            <div className="text-xs mt-1">–ü—Ä–æ–¥–æ–ª–∂–∞–π –ø—Ä–∞–∫—Ç–∏–∫–∏!</div>
                        </div>
                    ) : (
                        recentInsights.map(insight => (
                            <div
                                key={insight.id}
                                className={`border rounded-xl p-3 cursor-pointer transition-all ${selectedInsight === insight.id ? 'border-violet-500 bg-violet-50' : 'hover:border-gray-300'
                                    }`}
                                onClick={() => setSelectedInsight(selectedInsight === insight.id ? null : insight.id)}
                            >
                                <div className="flex items-start justify-between">
                                    <div className="flex-1">
                                        <div className="text-sm text-gray-800 leading-relaxed">
                                            {insight.text}
                                        </div>
                                        <div className="flex items-center gap-2 mt-2">
                                            <div
                                                className="w-2 h-2 rounded-full"
                                                style={{ backgroundColor: shadowColors[insight.shadowType] }}
                                            />
                                            <div className="text-xs text-gray-500">
                                                {new Date(insight.date).toLocaleDateString('ru')}
                                            </div>
                                            <div className="text-xs text-gray-500">
                                                ‚Ä¢ {Math.round(insight.confidence * 100)}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                {/* –†–∞–∑–≤–µ—Ä–Ω—É—Ç–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                                {selectedInsight === insight.id && (
                                    <div className="mt-3 pt-3 border-t border-gray-200">
                                        <div className="text-sm text-gray-700 mb-3">
                                            {generateMicroFeedback(insight)}
                                        </div>

                                        {insight.validated === undefined && (
                                            <div className="flex gap-2">
                                                <button
                                                    onClick={(e) => {
                                                        e.stopPropagation();
                                                        onValidateInsight(insight.id, true);
                                                    }}
                                                    className="px-3 py-1 bg-green-100 text-green-700 text-xs rounded-lg hover:bg-green-200"
                                                >
                                                    üëç –¢–æ—á–Ω–æ
                                                </button>
                                                <button
                                                    onClick={(e) => {
                                                        e.stopPropagation();
                                                        onValidateInsight(insight.id, false);
                                                    }}
                                                    className="px-3 py-1 bg-gray-100 text-gray-700 text-xs rounded-lg hover:bg-gray-200"
                                                >
                                                    üëé –ù–µ —Å–æ–≤—Å–µ–º
                                                </button>
                                            </div>
                                        )}

                                        {insight.validated !== undefined && (
                                            <div className={`text-xs px-2 py-1 rounded-lg inline-block ${insight.validated
                                                    ? 'bg-green-100 text-green-700'
                                                    : 'bg-gray-100 text-gray-700'
                                                }`}>
                                                {insight.validated ? '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ' : '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è'}
                                            </div>
                                        )}
                                    </div>
                                )}
                            </div>
                        ))
                    )}
                </div>
            </div>
        </div>
    );
}