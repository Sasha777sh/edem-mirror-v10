'use client';

import { useState, useEffect } from 'react';
import { Play, Pause, RotateCcw } from 'lucide-react';

interface PreviewStep {
    id: string;
    title: string;
    content: string;
    visual: 'question' | 'word' | 'step' | 'checklist';
    duration: number; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
}

const PREVIEW_STEPS: PreviewStep[] = [
    {
        id: 'question',
        title: '‚ùì –í–æ–ø—Ä–æ—Å',
        content: '–ß—Ç–æ –º–µ—à–∞–µ—Ç —Ç–µ–±–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?',
        visual: 'question',
        duration: 2.5
    },
    {
        id: 'word',
        title: 'üí´ –°–ª–æ–≤–æ',
        content: '–°—Ç—Ä–∞—Ö',
        visual: 'word',
        duration: 2
    },
    {
        id: 'step',
        title: 'üéØ –®–∞–≥ –Ω–∞ –¥–µ–Ω—å',
        content: '–ù–∞–ø–∏—Å–∞—Ç—å 3 –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—à—å',
        visual: 'step',
        duration: 3
    },
    {
        id: 'checklist',
        title: '‚úÖ –ß–µ–∫-–ª–∏—Å—Ç',
        content: '–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏',
        visual: 'checklist',
        duration: 2.5
    }
];

export default function HeroVideoPreview() {
    const [isPlaying, setIsPlaying] = useState(false);
    const [currentStep, setCurrentStep] = useState(0);
    const [progress, setProgress] = useState(0);
    const [autoStarted, setAutoStarted] = useState(false);

    // –ê–≤—Ç–æ–ø–ª–µ–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    useEffect(() => {
        const timer = setTimeout(() => {
            if (!autoStarted) {
                setIsPlaying(true);
                setAutoStarted(true);
            }
        }, 1000);
        return () => clearTimeout(timer);
    }, [autoStarted]);

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    useEffect(() => {
        if (!isPlaying) return;

        const currentStepData = PREVIEW_STEPS[currentStep];
        const stepDuration = currentStepData.duration * 1000; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        const interval = 50; // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 50–º—Å

        const timer = setInterval(() => {
            setProgress(prev => {
                const newProgress = prev + (interval / stepDuration) * 100;

                if (newProgress >= 100) {
                    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
                    if (currentStep < PREVIEW_STEPS.length - 1) {
                        setCurrentStep(curr => curr + 1);
                        return 0;
                    } else {
                        // –ö–æ–Ω–µ—Ü –ø—Ä–µ–≤—å—é - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
                        setCurrentStep(0);
                        setIsPlaying(false);
                        return 0;
                    }
                }
                return newProgress;
            });
        }, interval);

        return () => clearInterval(timer);
    }, [isPlaying, currentStep]);

    const handlePlayPause = () => {
        setIsPlaying(!isPlaying);
    };

    const handleRestart = () => {
        setCurrentStep(0);
        setProgress(0);
        setIsPlaying(true);
    };

    const getVisualContent = (step: PreviewStep) => {
        switch (step.visual) {
            case 'question':
                return (
                    <div className="space-y-3">
                        <div className="bg-gray-100 p-4 rounded-lg border-l-4 border-blue-500">
                            <div className="text-sm text-gray-600 mb-1">EDEM —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç:</div>
                            <div className="font-medium">{step.content}</div>
                        </div>
                        <div className="flex items-center gap-2 text-sm text-gray-500">
                            <div className="w-2 h-2 bg-gray-300 rounded-full animate-pulse"></div>
                            <div className="w-2 h-2 bg-gray-300 rounded-full animate-pulse" style={{ animationDelay: '0.2s' }}></div>
                            <div className="w-2 h-2 bg-gray-300 rounded-full animate-pulse" style={{ animationDelay: '0.4s' }}></div>
                            <span>–í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...</span>
                        </div>
                    </div>
                );

            case 'word':
                return (
                    <div className="text-center space-y-4">
                        <div className="inline-block px-6 py-4 bg-gradient-to-r from-violet-500 to-purple-600 text-white rounded-xl shadow-lg transform scale-110 transition-transform">
                            <div className="text-lg font-bold">{step.content}</div>
                            <div className="text-xs opacity-90">–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ</div>
                        </div>
                        <div className="text-sm text-gray-600">
                            –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏—é –∏ –Ω–∞—Ö–æ–¥–∏—Ç –∫–æ—Ä–µ–Ω—å
                        </div>
                    </div>
                );

            case 'step':
                return (
                    <div className="space-y-3">
                        <div className="bg-green-50 border border-green-200 p-4 rounded-lg">
                            <div className="flex items-center gap-2 text-green-700 text-sm font-medium mb-2">
                                <span>üéØ</span>
                                –¢–≤–æ–π —à–∞–≥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:
                            </div>
                            <div className="text-gray-800">{step.content}</div>
                            <div className="text-xs text-green-600 mt-2">‚è± 15 –º–∏–Ω—É—Ç</div>
                        </div>
                    </div>
                );

            case 'checklist':
                return (
                    <div className="space-y-3">
                        <div className="text-sm font-medium text-gray-700 mb-3">–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–Ω—è:</div>
                        <div className="space-y-2">
                            <label className="flex items-center gap-3 p-2 bg-gray-50 rounded-lg">
                                <input type="checkbox" checked className="w-4 h-4 text-green-600 rounded" readOnly />
                                <span className="text-sm line-through text-gray-500">–í—ã–ø–æ–ª–Ω–∏–ª —à–∞–≥</span>
                                <span className="text-xs text-green-600">‚úì</span>
                            </label>
                            <label className="flex items-center gap-3 p-2 bg-gray-50 rounded-lg">
                                <input type="checkbox" checked className="w-4 h-4 text-green-600 rounded" readOnly />
                                <span className="text-sm line-through text-gray-500">–°–¥–µ–ª–∞–ª –ø—Ä–∞–∫—Ç–∏–∫—É</span>
                                <span className="text-xs text-green-600">‚úì</span>
                            </label>
                            <label className="flex items-center gap-3 p-2 bg-gray-50 rounded-lg">
                                <input type="checkbox" checked className="w-4 h-4 text-green-600 rounded" readOnly />
                                <span className="text-sm line-through text-gray-500">–ó–∞–ø–∏—Å–∞–ª –≤ –¥–Ω–µ–≤–Ω–∏–∫</span>
                                <span className="text-xs text-green-600">‚úì</span>
                            </label>
                        </div>
                        <div className="text-center mt-4">
                            <div className="inline-flex items-center gap-2 px-3 py-1 bg-orange-100 text-orange-700 rounded-full text-sm">
                                üî• –°—Ç—Ä–∏–∫: 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
                            </div>
                        </div>
                    </div>
                );

            default:
                return null;
        }
    };

    const currentStepData = PREVIEW_STEPS[currentStep];

    return (
        <div className="bg-white rounded-2xl border shadow-lg overflow-hidden">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–æ–Ω—Ç—Ä–æ–ª–∞–º–∏ */}
            <div className="flex items-center justify-between p-4 border-b bg-gray-50">
                <div className="flex items-center gap-3">
                    <div className="w-2 h-2 bg-red-500 rounded-full"></div>
                    <div className="w-2 h-2 bg-yellow-500 rounded-full"></div>
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                    <span className="text-sm font-medium text-gray-700 ml-2">
                        EDEM Demo Preview
                    </span>
                </div>
                <div className="flex items-center gap-2">
                    <button
                        onClick={handlePlayPause}
                        className="p-2 text-gray-600 hover:text-gray-800 transition-colors"
                        aria-label={isPlaying ? '–ü–∞—É–∑–∞' : '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏'}
                    >
                        {isPlaying ? <Pause className="w-4 h-4" /> : <Play className="w-4 h-4" />}
                    </button>
                    <button
                        onClick={handleRestart}
                        className="p-2 text-gray-600 hover:text-gray-800 transition-colors"
                        aria-label="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"
                    >
                        <RotateCcw className="w-4 h-4" />
                    </button>
                </div>
            </div>

            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
            <div className="h-1 bg-gray-200">
                <div
                    className="h-full bg-violet-600 transition-all duration-100 ease-linear"
                    style={{
                        width: `${((currentStep * 100) + progress) / PREVIEW_STEPS.length}%`
                    }}
                />
            </div>

            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —à–∞–≥–æ–≤ */}
            <div className="flex items-center justify-between p-4 bg-gray-50 border-b">
                {PREVIEW_STEPS.map((step, index) => (
                    <div
                        key={step.id}
                        className={`flex items-center gap-2 text-xs transition-colors ${index === currentStep
                                ? 'text-violet-600 font-medium'
                                : index < currentStep
                                    ? 'text-green-600'
                                    : 'text-gray-400'
                            }`}
                    >
                        <div className={`w-2 h-2 rounded-full ${index === currentStep
                                ? 'bg-violet-600'
                                : index < currentStep
                                    ? 'bg-green-600'
                                    : 'bg-gray-300'
                            }`} />
                        <span className="hidden sm:inline">{step.title}</span>
                    </div>
                ))}
            </div>

            {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
            <div className="p-6 min-h-[280px]">
                <div className="mb-4">
                    <h3 className="text-lg font-semibold text-gray-800 mb-2">
                        {currentStepData.title}
                    </h3>
                </div>

                <div className="transition-all duration-500 ease-in-out">
                    {getVisualContent(currentStepData)}
                </div>
            </div>

            {/* –§—É—Ç–µ—Ä —Å CTA */}
            <div className="p-4 bg-gradient-to-r from-violet-50 to-purple-50 border-t">
                <div className="text-center">
                    <div className="text-sm text-gray-600 mb-2">
                        –í–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–∏–º–∞–µ—Ç 3 –º–∏–Ω—É—Ç—ã
                    </div>
                    <button className="px-6 py-2 bg-violet-600 text-white rounded-lg hover:bg-violet-700 transition-colors text-sm font-medium">
                        –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ
                    </button>
                </div>
            </div>
        </div>
    );
}