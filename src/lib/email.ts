// Email notification service

interface EmailOptions {
    to: string;
    subject: string;
    text: string;
    html?: string;
}

// Mock email service (in production, you would use something like Nodemailer or SendGrid)
export async function sendEmail(options: EmailOptions): Promise<boolean> {
    try {
        // In a real implementation, you would integrate with an email service
        console.log('üìß Sending email:', {
            to: options.to,
            subject: options.subject,
            text: options.text.substring(0, 100) + '...'
        });

        // Simulate email sending delay
        await new Promise(resolve => setTimeout(resolve, 100));

        // For now, we'll just log the email
        // In production, you would use:
        // - Nodemailer with SMTP
        // - SendGrid API
        // - Amazon SES
        // - Mailgun API
        // - etc.

        return true;
    } catch (error) {
        console.error('Failed to send email:', error);
        return false;
    }
}

// Subscription event notifications
export async function sendSubscriptionNotification(
    userEmail: string,
    eventType: 'trial_started' | 'trial_ending' | 'subscription_activated' | 'subscription_cancelled' | 'payment_failed',
    data?: any
): Promise<boolean> {
    let subject = '';
    let text = '';
    let html = '';

    switch (eventType) {
        case 'trial_started':
            subject = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EDEM PRO! –í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω';
            text = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–í–∞—à 7-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ EDEM PRO —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –í —Ç–µ—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.

–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ PRO:
‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã
‚Ä¢ –ê—Ä—Ö–µ—Ç–∏–ø—ã –∏ –≥–ª—É–±–∏–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ 5-–º–∏–Ω—É—Ç–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF –æ—Ç—á—ë—Ç–æ–≤
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∑–∞ 30 –¥–Ω–µ–π
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –∂—É—Ä–Ω–∞–ª–∞

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ EDEM`;
            break;

        case 'trial_ending':
            subject = '–í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ EDEM PRO —Å–∫–æ—Ä–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è';
            text = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ EDEM PRO –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞. –ú—ã –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É!

–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è PRO —Ñ—É–Ω–∫—Ü–∏—è–º–∏, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ EDEM`;
            break;

        case 'subscription_activated':
            subject = '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ EDEM PRO –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!';
            text = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ EDEM PRO —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ EDEM!

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ EDEM`;
            break;

        case 'subscription_cancelled':
            subject = '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ EDEM PRO –æ—Ç–º–µ–Ω–µ–Ω–∞';
            text = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ EDEM PRO –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è PRO —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.

–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ EDEM`;
            break;

        case 'payment_failed':
            subject = '–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ EDEM PRO';
            text = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–ø–ª–∞—Ç—É –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ EDEM PRO. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.

–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ EDEM`;
            break;

        default:
            return false;
    }

    return await sendEmail({
        to: userEmail,
        subject,
        text,
        html
    });
}

// Ritual completion notifications
export async function sendRitualNotification(
    userEmail: string,
    ritualType: string,
    data?: any
): Promise<boolean> {
    const subject = `–í–∞—à —Ä–∏—Ç—É–∞–ª "${ritualType}" –∑–∞–≤–µ—Ä—à—ë–Ω`;
    const text = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∏—Ç—É–∞–ª "${ritualType}". –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!

–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ EDEM`;

    return await sendEmail({
        to: userEmail,
        subject,
        text
    });
}