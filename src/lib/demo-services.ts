// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –∫–ª—é—á–µ–π

// Mock OpenAI
export const mockOpenAI = {
    async chat(prompt: string): Promise<string> {
        console.log('üß† Mock OpenAI response for:', prompt.substring(0, 50) + '...');

        const responses = [
            "–ü–æ–Ω–∏–º–∞—é. –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ –æ —Ç–æ–º, —á—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å.",
            "–≠—Ç–æ –≤–∞–∂–Ω—ã–π —à–∞–≥. –ì–¥–µ –≤ —Ç–µ–ª–µ —ç—Ç–æ –æ—â—É—â–∞–µ—Ç—Å—è?",
            "–í–∏–∂—É –∫–æ—Ä–µ–Ω—å. –≠—Ç–æ –Ω–µ –ø—Ä–æ –ø–æ—Ç–µ—Ä—é, –∞ –ø—Ä–æ –∫–æ–Ω—Ç—Ä–æ–ª—å.",
            "–ì–æ—Ç–æ–≤ –ø–æ–ª—É—á–∏—Ç—å —à–∞–≥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?"
        ];

        return responses[Math.floor(Math.random() * responses.length)];
    }
};

// Mock Redis
export const mockRedis = {
    async get(key: string) {
        console.log('üì¶ Mock Redis GET:', key);
        return null;
    },

    async set(key: string, value: any, ttl?: number) {
        console.log('üì¶ Mock Redis SET:', key, '(TTL:', ttl, 'sec)');
        return true;
    },

    async del(key: string) {
        console.log('üì¶ Mock Redis DEL:', key);
        return true;
    }
};

// Mock Supabase Auth
export const mockAuth = {
    async getUser() {
        return {
            id: 'demo_user_123',
            email: 'demo@example.com',
            name: 'Demo User'
        };
    },

    async signOut() {
        console.log('üë§ Mock Auth: Sign out');
        return true;
    }
};

// Mock Database
export const mockDB = {
    async query(sql: string, params?: any[]) {
        console.log('üóÑÔ∏è Mock DB Query:', sql.substring(0, 80) + '...');

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—Å–∞
        if (sql.includes('subscriptions')) {
            return [{ plan: 'free', status: 'active' }];
        }

        if (sql.includes('sessions')) {
            return [{
                id: 'demo_session_123',
                voice: 'soft',
                inputs: { problem: 'demo problem' },
                output: { truthCut: 'demo truth cut' }
            }];
        }

        return [];
    }
};