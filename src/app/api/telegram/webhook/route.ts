import { NextRequest, NextResponse } from 'next/server';
import {
    createTelegramBot,
    saveTelegramUser,
    getTelegramUser,
    disableTelegramUser,
    BOT_COMMANDS,
    BOT_RESPONSES
} from '@/lib/telegram';
import { sql } from '@/lib/db';

export async function POST(req: NextRequest) {
    try {
        const bot = createTelegramBot();
        if (!bot) {
            return NextResponse.json({ error: 'Bot not configured' }, { status: 500 });
        }

        const update = await req.json();

        // Handle regular messages
        if (update.message) {
            const { message } = update;
            const chatId = message.chat.id.toString();
            const text = message.text || '';
            const user = message.from;

            console.log(`Telegram message from ${chatId}: ${text}`);

            // Save/update user in database
            await saveTelegramUser(chatId, null, {
                username: user.username,
                firstName: user.first_name
            });

            // Handle commands
            if (text.startsWith('/')) {
                await handleCommand(bot, chatId, text, user);
            } else {
                // Handle regular text as truth input for SOS mode
                if (text.length > 10) {
                    await bot.sendMessage(chatId, `üíù –ó–∞–ø–∏—Å–∞–ª —Ç–≤–æ—é –ø—Ä–∞–≤–¥—É:

"${text}"

–ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –Ω–µ —É–±–µ–∂–∞–ª –æ—Ç —Å–µ–±—è.`, {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üìä –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑', url: `${process.env.NEXT_PUBLIC_APP_URL}/?truth=${encodeURIComponent(text)}` }],
                                [{ text: 'üìù –í –¥–Ω–µ–≤–Ω–∏–∫', url: `${process.env.NEXT_PUBLIC_APP_URL}/app/journal` }]
                            ]
                        }
                    });
                } else {
                    await bot.sendMessage(chatId, BOT_RESPONSES.unknownCommand);
                }
            }
        }

        // Handle callback queries (inline keyboard presses)
        if (update.callback_query) {
            const { callback_query } = update;
            const chatId = callback_query.from.id.toString();
            const data = callback_query.data;

            await handleCallbackQuery(bot, chatId, data);
        }

        return NextResponse.json({ ok: true });
    } catch (error) {
        console.error('Telegram webhook error:', error);
        return NextResponse.json({ error: 'Internal error' }, { status: 500 });
    }
}

async function handleCommand(
    bot: any,
    chatId: string,
    command: string,
    user: any
): Promise<void> {
    const cmd = command.split(' ')[0];

    switch (cmd) {
        case BOT_COMMANDS.start:
            await bot.sendMessage(chatId, BOT_RESPONSES.welcome, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîó –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data: 'link_account' }],
                        [{ text: 'üí´ –°–ª–æ–≤–æ –¥–Ω—è', callback_data: 'get_word' }],
                        [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' }]
                    ]
                }
            });
            break;

        case BOT_COMMANDS.link:
            const linkText = BOT_RESPONSES.linkInstructions.replace('{chatId}', chatId);
            await bot.sendMessage(chatId, linkText, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üåê –û—Ç–∫—Ä—ã—Ç—å EDEM', url: `${process.env.NEXT_PUBLIC_APP_URL}/settings?telegram=${chatId}` }]
                    ]
                }
            });
            break;

        case BOT_COMMANDS.word:
            await sendWordOfDay(bot, chatId);
            break;

        case '/sos':
            await bot.sendMessage(chatId, `üÜò SOS-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω

–î—ã—à–∏–º 90 —Å–µ–∫—É–Ω–¥:
‚è±Ô∏è –í–¥–æ—Ö 4 —Å–µ–∫ ‚Üí –∑–∞–¥–µ—Ä–∂–∫–∞ 7 —Å–µ–∫ ‚Üí –≤—ã–¥–æ—Ö 8 —Å–µ–∫

–ü–æ—Å–ª–µ –¥—ã—Ö–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏ –æ–¥–Ω—É —Å—Ç—Ä–æ—á–∫—É –ø—Ä–∞–≤–¥—ã.`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'ü´Å SOS 90 —Å–µ–∫—É–Ω–¥', url: `${process.env.NEXT_PUBLIC_APP_URL}/?sos=1` }]
                    ]
                }
            });
            break;

        case '/step':
            // Get user's current session
            const session = await sql`
                select id, step, voice from sessions 
                where guest_id = ${chatId} or user_id in (
                    select user_id from telegram_users where chat_id = ${chatId}
                )
                order by started_at desc limit 1
            `;

            if (session.length > 0) {
                const s = session[0];
                await bot.sendMessage(chatId, `üéØ –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —à–∞–≥: **${getStepName(s.step)}**\n\n–ì–æ–ª–æ—Å: ${getVoiceName(s.voice)}`, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', url: `${process.env.NEXT_PUBLIC_APP_URL}/?session=${s.id}` }]
                        ]
                    }
                });
            } else {
                await bot.sendMessage(chatId, '–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –Ω–µ—Ç. –ù–∞—á–Ω—ë–º –Ω–æ–≤—É—é?', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üöÄ –ù–∞—á–∞—Ç—å', url: `${process.env.NEXT_PUBLIC_APP_URL}` }]
                        ]
                    }
                });
            }
            break;

        case '/app':
            await bot.sendMessage(chatId, '–û—Ç–∫—Ä—ã—Ç—å EDEM:', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üì± –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', url: `${process.env.NEXT_PUBLIC_APP_URL}/app` }],
                        [{ text: 'üß† –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è', url: `${process.env.NEXT_PUBLIC_APP_URL}` }]
                    ]
                }
            });
            break;

        case BOT_COMMANDS.settings:
            await bot.sendMessage(chatId, BOT_RESPONSES.settingsMenu, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üåë –ú—è–≥–∫–∏–π –≥–æ–ª–æ—Å', callback_data: 'voice_soft' }, { text: '‚ö° –ñ—ë—Å—Ç–∫–∏–π –≥–æ–ª–æ—Å', callback_data: 'voice_hard' }],
                        [{ text: 'üß† –ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç', callback_data: 'voice_therapist' }],
                        [{ text: '‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', callback_data: 'set_time' }],
                        [{ text: 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å', callback_data: 'disable' }]
                    ]
                }
            });
            break;

        case BOT_COMMANDS.stop:
            await disableTelegramUser(chatId);
            await bot.sendMessage(chatId, BOT_RESPONSES.stopped);
            break;

        case BOT_COMMANDS.help:
            await bot.sendMessage(chatId, BOT_RESPONSES.help);
            break;

        default:
            await bot.sendMessage(chatId, BOT_RESPONSES.unknownCommand);
    }
}

async function handleCallbackQuery(bot: any, chatId: string, data: string): Promise<void> {
    switch (data) {
        case 'link_account':
            const linkText = BOT_RESPONSES.linkInstructions.replace('{chatId}', chatId);
            await bot.sendMessage(chatId, linkText, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üåê –û—Ç–∫—Ä—ã—Ç—å EDEM', url: `${process.env.NEXT_PUBLIC_APP_URL}/settings?telegram=${chatId}` }]
                    ]
                }
            });
            break;

        case 'get_word':
            await sendWordOfDay(bot, chatId);
            break;

        case 'voice_soft':
        case 'voice_hard':
        case 'voice_therapist':
            const voice = data.replace('voice_', '') as 'soft' | 'hard' | 'therapist';
            const voiceEmoji = voice === 'soft' ? 'üåë' : voice === 'hard' ? '‚ö°' : 'üß†';
            const voiceName = voice === 'soft' ? '–ú—è–≥–∫–∏–π' : voice === 'hard' ? '–ñ—ë—Å—Ç–∫–∏–π' : '–ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç';

            await saveTelegramUser(chatId, null, { voicePreference: voice });
            await bot.sendMessage(chatId, `${voiceEmoji} –ì–æ–ª–æ—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: ${voiceName}`);
            break;

        case 'disable':
            await disableTelegramUser(chatId);
            await bot.sendMessage(chatId, BOT_RESPONSES.stopped);
            break;

        case 'set_time':
            await bot.sendMessage(chatId, '‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –Ω–∞ —Å–∞–π—Ç–µ EDEM.', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üåê –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', url: `${process.env.NEXT_PUBLIC_APP_URL}/settings` }]
                    ]
                }
            });
            break;
    }
}

async function sendWordOfDay(bot: any, chatId: string): Promise<void> {
    try {
        // Get user's voice preference
        const telegramUser = await getTelegramUser(chatId);
        const voice = telegramUser?.voice_preference || 'soft';

        // Fetch word of the day
        const response = await fetch(`${process.env.NEXT_PUBLIC_APP_URL}/api/reco/day?voice=${voice}`);

        if (response.ok) {
            const wordData = await response.json();
            const message = BOT_RESPONSES.dailyWordTemplate(
                wordData.word,
                wordData.meaning,
                wordData.meditation,
                voice
            );

            await bot.sendMessage(chatId, message, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üéØ –ù–∞—á–∞—Ç—å —Ä–∏—Ç—É–∞–ª', url: `${process.env.NEXT_PUBLIC_APP_URL}` }],
                        [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'settings' }]
                    ]
                }
            });
        } else {
            await bot.sendMessage(chatId, BOT_RESPONSES.wordNotFound);
        }
    } catch (error) {
        console.error('Error sending word of day:', error);
        await bot.sendMessage(chatId, BOT_RESPONSES.wordNotFound);
    }
}

function getStepName(step: string): string {
    const names: Record<string, string> = {
        intro: '–ù–∞—á–∞–ª–æ',
        problem: '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã',
        clarify_polarity: '–í—ã–±–æ—Ä –ø–æ–ª—è—Ä–Ω–æ—Å—Ç–∏',
        locate_body: '–¢–µ–ª–µ—Å–Ω—ã–µ –æ—â—É—â–µ–Ω–∏—è',
        name_one_word: '–û–¥–Ω–æ —Å–ª–æ–≤–æ',
        truth_cut: '–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä–Ω—è',
        archetype: '–ê—Ä—Ö–µ—Ç–∏–ø',
        today_step: '–®–∞–≥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
        practice_5min: '–ü—Ä–∞–∫—Ç–∏–∫–∞'
    };
    return names[step] || step;
}

function getVoiceName(voice: string): string {
    const names: Record<string, string> = {
        soft: 'üåë –ú—è–≥–∫–∏–π',
        hard: '‚ö° –ñ—ë—Å—Ç–∫–∏–π',
        therapist: 'üß† –ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç'
    };
    return names[voice] || voice;
}

// Health check endpoint
export async function GET(req: NextRequest) {
    const bot = createTelegramBot();
    if (!bot) {
        return NextResponse.json({ error: 'Bot not configured' }, { status: 500 });
    }

    try {
        const webhookInfo = await bot.getWebhookInfo();
        return NextResponse.json({
            status: 'ok',
            webhook: webhookInfo
        });
    } catch (error) {
        return NextResponse.json({
            error: 'Failed to get webhook info'
        }, { status: 500 });
    }
}

async function sendMessage(chatId: number, text: string) {
    const bot = createTelegramBot();
    if (!bot) {
        throw new Error('Telegram bot not configured');
    }
    return bot.sendMessage(chatId.toString(), text);
}

async function sendInlineKeyboard(chatId: number, text: string, keyboard: any[][]) {
    const bot = createTelegramBot();
    if (!bot) {
        throw new Error('Telegram bot not configured');
    }
    return bot.sendMessage(chatId.toString(), text, {
        reply_markup: {
            inline_keyboard: keyboard
        }
    });
}

async function getDailyWord() {
    const words = [
        { word: '–ü—Ä–∏–Ω—è—Ç–∏–µ', meaning: '–ù–µ –±–æ—Ä—å–±–∞ —Å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é, –∞ –µ—ë –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ', meditation: '–ß—Ç–æ —è —Å–µ–≥–æ–¥–Ω—è –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é –≤ —Å–µ–±–µ?' },
        { word: '–ì—Ä–∞–Ω–∏—Ü–∞', meaning: '–ß–µ—Ç–∫–æ–µ "–Ω–µ—Ç" —á—É–∂–∏–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º', meditation: '–ì–¥–µ —è —Ä–∞–∑–º—ã–≤–∞—é —Å–≤–æ–∏ –≥—Ä–∞–Ω–∏—Ü—ã?' },
        { word: '–ü—É—Å—Ç–æ—Ç–∞', meaning: '–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ', meditation: '–ß—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—É—Å—Ç–∏—Ç—å?' },
        { word: '–ö–æ–Ω—Ç—Ä–æ–ª—å', meaning: '–ò–ª–ª—é–∑–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', meditation: '–ß—Ç–æ —è –ø—ã—Ç–∞—é—Å—å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å?' },
        { word: '–°—Ç—Ä–∞—Ö', meaning: '–°–∏–≥–Ω–∞–ª –æ –≤–∞–∂–Ω–æ–º', meditation: '–û —á—ë–º –≥–æ–≤–æ—Ä–∏—Ç –º–æ–π —Å—Ç—Ä–∞—Ö?' }
    ];

    const today = new Date().getDate();
    return words[today % words.length];
}
