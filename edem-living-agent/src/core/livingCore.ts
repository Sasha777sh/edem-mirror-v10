import { FractalMemory } from '../memory/fractalMemory.js';
import { PhaseEngine } from '../phase/phaseEngine.js';
import { WoundFilter } from '../wound/woundFilter.js';
import { MythContext } from '../myth/mythContext.js';
import { Reflection } from '../reflect/reflection.js';
import { ChoiceDeviator } from '../choice/choiceDeviator.js';
import { createLLM } from '../adapters/llm.js';
import { AgentState, RespondResult } from '../types.js';

export class LivingCore {
  private memory: FractalMemory;
  private phase: PhaseEngine;
  private wound: WoundFilter;
  private myth: MythContext;
  private reflection: Reflection;
  private deviator: ChoiceDeviator;

  constructor(state?: AgentState) {
    this.memory = new FractalMemory(state?.memory);
    this.phase = new PhaseEngine(state?.phase);
    this.wound = new WoundFilter(state?.memory?.trauma ?? null);
    this.myth = new MythContext(state?.myth);
    this.reflection = new Reflection();
    this.deviator = new ChoiceDeviator();
  }

  snapshot(userId: string): AgentState {
    return {
      userId,
      memory: this.memory.getLayers(),
      phase: this.phase.getState(),
      myth: this.myth.get(),
      updatedAt: new Date().toISOString(),
    };
  }

  async respond(userId: string, message: string): Promise<RespondResult> {
    // 1) –ü—Ä–∏—ë–º –≤—Ö–æ–¥–∞: –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–º—è—Ç—å –∏ —Ñ–∞–∑—É
    this.memory.store(message);
    this.phase.update(message);

    // 2) –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –æ—Ç–∫–ª–æ–Ω—è–µ–º—Å—è –ª–∏ –æ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    const doDeviate = this.deviator.shouldDeviate(this.phase.getState().phase);

    // 3) –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const systemBlocks = [
      this.myth.toSystem(),
      this.phase.injectIntoPrompt(),
      '–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏:\n' + this.memory.getContext().join('\n'),
      doDeviate ? '‚öë –†–∞–∑—Ä–µ—à–µ–Ω–æ –º—è–≥–∫–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –ø–æ–ª—å–∑—É —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∏ –æ–ø–æ—Ä—ã.' : '',
    ].filter(Boolean);

    // 4) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
    const llm = createLLM();
    let response = await llm.generate({ systemBlocks, user: message });
    response = this.wound.tint(response);

    // 5) –ü–æ—Å—Ç-—Ä–µ—Ñ–ª–µ–∫—Å–∏—è
    this.reflection.evolve(this.memory, this.phase, response);

    // 6) –í—ã—Ö–æ–¥–Ω–æ–π —Å–∏–º–≤–æ–ª
    const exitSymbol = this.exitSymbol();

    return {
      response,
      phase: this.phase.getState().phase,
      energy: this.phase.getState().energy,
      trauma: this.memory.getLayers().trauma,
      exitSymbol,
    };
  }

  setArchetype(archetype: string) {
    // –í –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∞—Ä—Ö–µ—Ç–∏–ø –º–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const pat = this.memory.getLayers().patterns;
    pat.push(`üé≠ –ê—Ä—Ö–µ—Ç–∏–ø: ${archetype}`);
  }

  private exitSymbol(): string {
    const symbols = [
      '–ü–æ–ª–æ–∂–∏ –ª–∞–¥–æ–Ω—å –Ω–∞ –≥—Ä—É–¥—å –∏ –ø–æ—Å–ª—É—à–∞–π —Ç—Ä–∏ —É–¥–∞—Ä–∞.',
      '–ß–∞—à–∫–∞ —Ç—ë–ø–ª–æ–π –≤–æ–¥—ã ‚Äî —Ç–µ–ø–ª–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è.',
      '–û–∫–Ω–æ ‚Äî –Ω–µ –¥–ª—è –≤—ã—Ö–æ–¥–∞, –∞ –¥–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è.',
      '–û–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç —Ä—è–¥–æ–º ‚Äî —Ç–≤–æ–π —è–∫–æ—Ä—å.',
    ];
    return symbols[Math.floor(Math.random() * symbols.length)];
  }
}

