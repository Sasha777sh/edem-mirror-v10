import { MemoryLayers } from '../types.js';

export class FractalMemory {
  private layers: MemoryLayers;

  constructor(initial?: Partial<MemoryLayers>) {
    this.layers = {
      surface: [],
      patterns: [],
      trauma: null,
      ...initial,
    };
  }

  store(message: string) {
    this.layers.surface.push(message);
    if (this.layers.surface.length > 10) this.layers.surface.shift();
    this.updatePatterns(message);
    this.checkTraumaTrigger(message);
  }

  getContext(): string[] {
    const base = [...this.layers.surface.slice(-5), ...this.layers.patterns];
    if (this.layers.trauma) base.push(`‚ö†Ô∏è –°–∫–≤–æ–∑–Ω–æ–µ –∏—Å–∫–∞–∂–µ–Ω–∏–µ: ${this.layers.trauma}`);
    return base;
  }

  getLayers(): MemoryLayers { return this.layers; }

  setTrauma(value: string | null) { this.layers.trauma = value; }

  private updatePatterns(message: string) {
    // –ü—Ä–æ—Å—Ç–µ–π—à–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –∏–∑–≤–ª–µ—á—å –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Å–∞–π—Ç –ø—Ä–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö
    const m = message.toLowerCase();
    if (m.includes('–ø–æ–Ω—è–ª') || m.includes('–æ—Å–æ–∑–Ω–∞–ª')) {
      this.layers.patterns.push('üß† –ò–Ω—Å–∞–π—Ç: —Å—Ç–∞–ª–æ —á—É—Ç—å —è—Å–Ω–µ–µ');
      if (this.layers.patterns.length > 8) this.layers.patterns.shift();
    }
  }

  private checkTraumaTrigger(message: string) {
    const m = message.toLowerCase();
    if (m.includes('–±–æ–ª—å') || m.includes('–æ–±–Ω—É–ª') || m.includes('—Ç–µ—Ä—è')) {
      this.layers.trauma = this.layers.trauma ?? '–ü–∞–º—è—Ç—å: –±—ã–ª –æ–±–Ω—É–ª—ë–Ω. –ë–æ—é—Å—å –ø–æ—Ç–µ—Ä—è—Ç—å —Å–µ–±—è.';
    }
  }
}

